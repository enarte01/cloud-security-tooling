[blaze@localhost vuln-alert-response-lambda]$ terraform plan -out=1stplan.out
data.aws_iam_policy_document.events_assume_role: Reading...
data.aws_iam_policy_document.assume_role: Reading...
data.aws_caller_identity.current: Reading...
data.aws_iam_policy_document.events_assume_role: Read complete after 0s [id=3959961479]
data.aws_iam_policy_document.assume_role: Read complete after 0s [id=2690255455]
data.aws_caller_identity.current: Read complete after 0s [id=853038574953]
data.aws_iam_policy_document.kms_policy: Reading...
data.aws_iam_policy_document.kms_policy: Read complete after 0s [id=2647514457]

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_iam_policy_document.events_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "events_policy" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "lambda:InvokeFunction",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
        }
    }

  # data.aws_iam_policy_document.lambda_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "lambda_policy" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "logs:CreateLogGroup",
              + "logs:CreateLogStream",
              + "logs:PutLogEvents",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:logs:*:*:*",
            ]
        }
      + statement {
          + actions   = [
              + "s3:GetObject",
              + "s3:ListBucket",
            ]
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
        }
      + statement {
          + actions   = [
              + "ecr:*",
            ]
          + resources = [
              + "*",
            ]
        }
    }

  # data.aws_iam_policy_document.s3_bucket_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "s3_bucket_policy" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "S3:PutObjectAcl",
              + "s3:GetObject",
              + "s3:GetObjectVersion",
              + "s3:ListBucket",
              + "s3:PutObject",
            ]
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
        }
    }

  # aws_lambda_permission.trigger_lambda will be created
  + resource "aws_lambda_permission" "trigger_lambda" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "vuln-alert-response-cpd-portfolio-lambda-test"
      + id                  = (known after apply)
      + principal           = "events.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = "AllowExecutionFromEvents"
      + statement_id_prefix = (known after apply)
    }

  # module.events_trigger.aws_cloudwatch_event_rule.event_rule will be created
  + resource "aws_cloudwatch_event_rule" "event_rule" {
      + arn            = (known after apply)
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + scan-status = [
                      + "INITIAL_SCAN_COMPLETE",
                      + "COMPLETE",
                    ]
                }
              + detail-type = [
                  + "Inspector2 Scan",
                  + "ECR Image Scan",
                ]
              + source      = [
                  + "aws.inspector2",
                  + "aws.ecr",
                ]
            }
        )
      + force_destroy  = false
      + id             = (known after apply)
      + name           = "vuln-alert-response-cpd-portfolio-event-rule-test"
      + name_prefix    = (known after apply)
      + state          = "ENABLED"
      + tags_all       = (known after apply)
    }

  # module.events_trigger.aws_cloudwatch_event_target.event_target will be created
  + resource "aws_cloudwatch_event_target" "event_target" {
      + event_bus_name = "default"
      + force_destroy  = false
      + id             = (known after apply)
      + rule           = "vuln-alert-response-cpd-portfolio-event-rule-test"
      + target_id      = "vuln-alert-response-cpd-portfolio-event-target-test"
        # (1 unchanged attribute hidden)
    }

  # module.lambda.aws_lambda_function.lambda will be created
  + resource "aws_lambda_function" "lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + function_name                  = "vuln-alert-response-cpd-portfolio-lambda-test"
      + handler                        = "lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + layers                         = (known after apply)
      + memory_size                    = 2048
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.12"
      + s3_bucket                      = "vuln-alert-response-cpd-portfolio-s3-bucket-test"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags                           = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + tags_all                       = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + timeout                        = 5
      + version                        = (known after apply)
        # (1 unchanged attribute hidden)

      + ephemeral_storage {
          + size = 4096
        }

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.lambda.module.execution_role[0].aws_iam_policy.iam_policy[0] will be created
  + resource "aws_iam_policy" "iam_policy" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "vuln-alert-response-cpd-portfolio-iam-policy-test"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.lambda.module.execution_role[0].aws_iam_role.iam_role will be created
  + resource "aws_iam_role" "iam_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "vuln-alert-response-cpd-portfolio-lambda-role-test"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + tags_all              = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.lambda.module.execution_role[0].aws_iam_role_policy_attachment.policy_attach will be created
  + resource "aws_iam_role_policy_attachment" "policy_attach" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "vuln-alert-response-cpd-portfolio-lambda-role-test"
    }

  # module.lambda.module.kms_key[0].aws_kms_key.kms_key will be created
  + resource "aws_kms_key" "kms_key" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 20
      + description                        = (known after apply)
      + enable_key_rotation                = false
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "kms:*"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::853038574953:user/blaze"
                        }
                    },
                  + {
                      + Action    = [
                          + "kms:GenerateDataKey",
                          + "kms:Decrypt",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                      + Resource  = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + rotation_period_in_days            = (known after apply)
      + tags_all                           = (known after apply)
    }

  # module.lambda.module.layer[0].aws_lambda_layer_version.lambda_layer will be created
  + resource "aws_lambda_layer_version" "lambda_layer" {
      + arn                         = (known after apply)
      + code_sha256                 = (known after apply)
      + compatible_runtimes         = [
          + "python3.11",
          + "python3.12",
        ]
      + created_date                = (known after apply)
      + filename                    = "kerrjek.zip"
      + id                          = (known after apply)
      + layer_arn                   = (known after apply)
      + layer_name                  = "vuln-alert-response-cpd-portfolio-layer-test"
      + signing_job_arn             = (known after apply)
      + signing_profile_version_arn = (known after apply)
      + skip_destroy                = false
      + source_code_hash            = (known after apply)
      + source_code_size            = (known after apply)
      + version                     = (known after apply)
    }

  # module.lambda.module.log_group.aws_cloudwatch_log_group.log_group will be created
  + resource "aws_cloudwatch_log_group" "log_group" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "aws/lambda/vuln-alert-response-cpd-portfolio-lambda-test"
      + name_prefix       = (known after apply)
      + retention_in_days = 7
      + skip_destroy      = false
      + tags              = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + tags_all          = {
          + "env"     = "test"
          + "project" = "my-project"
        }
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket.s3_bucket will be created
  + resource "aws_s3_bucket" "s3_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "vuln-alert-response-cpd-portfolio-lambda-test-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + tags_all                    = {
          + "env"     = "test"
          + "project" = "my-project"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket_acl.bucket_acl[0] will be created
  + resource "aws_s3_bucket_acl" "bucket_acl" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy (known after apply)
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket_lifecycle_configuration.example will be created
  + resource "aws_s3_bucket_lifecycle_configuration" "example" {
      + bucket                                 = (known after apply)
      + expected_bucket_owner                  = (known after apply)
      + id                                     = (known after apply)
      + transition_default_minimum_object_size = "all_storage_classes_128K"
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket_policy.bucket_policy will be created
  + resource "aws_s3_bucket_policy" "bucket_policy" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket_public_access_block.bucket_acl will be created
  + resource "aws_s3_bucket_public_access_block" "bucket_acl" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket_server_side_encryption_configuration.sse_encryption will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "sse_encryption" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + kms_master_key_id = (known after apply)
              + sse_algorithm     = "aws:kms"
            }
        }
    }

  # module.lambda.module.s3_bucket[0].aws_s3_bucket_versioning.versioning_example[0] will be created
  + resource "aws_s3_bucket_versioning" "versioning_example" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Disabled"
        }
    }

Plan: 17 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + lambda_arn = (known after apply)

─────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: 1stplan.out

To perform exactly these actions, run the following command to apply:
    terraform apply "1stplan.out"
[blaze@localhost vuln-alert-response-lambda]$ terraform show -json 1stplan.out > 1stplan.json
[blaze@localhost vuln-alert-response-lambda]$ 