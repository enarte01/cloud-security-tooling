name: Code Scan Run
description: Scans Python and IaC code for security vulnerabilities via Bandit and Trivy
inputs:
  scan-ref:
    description: 'List of TF directories to scan'
    required: true
  python_dir:
    description: 'List of Python directories to scan'
    required: true
  trivy_severity:
    description: 'Filters Trivy scan results by severity'
    default: 'CRITICAL'
    required: true

runs:
  using: "composite"
  steps:
    - name: Run Trivy vulnerability scanner in IaC mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config' #
        format: 'sarif'
        hide-progress: false
        output: 'trivy-results.sarif'
        exit-code: '0' # set to 0 to ignore vulnerabilities
        severity: ${{ inputs.trivy_severity }} # filters by severity
        ignore-unfixed: true  # to ignore unfixed vulnerabilities
        scan-ref: ${{ inputs.scan-ref }} # list of directories to scan
        trivyignores: "${{ inputs.scan-ref }}/.trivyignore"
      env:
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
        TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db

    - name: Archive Trivy scan results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results-sarif
        path: trivy-results.sarif
        retention-days: 1

    - name: Check for empty URIs in SARIF file
      id: check_empty_uris
      shell: bash
      run: |
        echo "Checking for empty URIs in the SARIF file..."
        if egrep -q "\"uri\": \"\"" trivy-results.sarif; then
          echo "Empty URI found."
          echo "empty_uri=true" >> $GITHUB_ENV
        else
          echo "No empty URIs found."
          echo "empty_uri=false" >> $GITHUB_ENV
        fi

    - name: Rerun Trivy if empty URIs found
      if: env.empty_uri == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        format: 'sarif'
        hide-progress: false
        output: 'trivy-results.sarif'
        exit-code: '0' # set to 0 to ignore vulnerabilities
        severity: ${{ inputs.trivy_severity }} # filters by severity
        ignore-unfixed: true  # to ignore unfixed vulnerabilities
        scan-ref: ${{ inputs.scan-ref }} # list of directories to scan
        trivyignores: "${{ inputs.scan-ref }}/.trivyignore"

    - name: Rerun Archive Trivy scan results
      if: env.empty_uri == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results-sarif
        path: trivy-results.sarif
        retention-days: 1
        overwrite: true


    - name: Cleanse Sarif file
      shell: bash
      run: |
        sed -i 's#git::https:/##g' trivy-results.sarif
        cat trivy-results.sarif | jq ' del(.runs[].results[] | select (.locations[].physicalLocation.artifactLocation.uri == ""))' > processed-trivy-results.sarif

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: processed-trivy-results.sarif
        #category: trivy-iac-scan

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install Bandit
      shell: bash
      run: pip install bandit bandit-sarif-formatter

    - name: Run Bandit code scanner
      shell: bash
      run: |
        bandit -r ${{ inputs.python_dir }} -lll --format sarif --output bandit.sarif # runs recursively for root directory
      continue-on-error: true # to prevent blocking

    - name: Upload Bandit scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit.sarif
        category: bandit-python-scan

    - name: Archive Bandit scan results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results-sarif
        path: bandit.sarif
        retention-days: 1