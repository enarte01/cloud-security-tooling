name: Terraform Run
description: Runs a Terraform Plan or Apply against an AWS account, assumes the correct role has been assumed above
inputs:
#  aws_role:
#    description: 'AWS Role to assume to perform Terraform plan'
#    required: true
#  role_session_name: 
#    description: 'AWS role session name'
#    default: 'tfghIACSessionName'
#    required: true
  terraform_action:
    description: 'Terraform action to perform, options are "plan" and "apply"'
    default: 'plan'
    required: true
  terraform_version:
    description: 'Terraform Version'
    default: '1.4.2'
    required: true
  tfstate_bucket:
    description: 'The AWS S3 bucket containing the TF state file'
    required: true
  tfstate_dynamodb_table:
    description: 'The AWS role to assume'
    required: true
  tf_working_dir:
    description: 'The Terraform Directory to run in'
    required: true
  tf_env:
    description: 'The environment to run in'
    required: true
#  role_session_duration:
#    description: 'The duration of the assumed role session'
#    default: '1200'
#    required: false


outputs:
  terraform_plan_exitcode:
    description: "Whether changes are needed to the plan"
    value: ${{ steps.plan.outputs.exitcode }}
  terraform_apply_output:
    description: "Everything output by Terraform apply"
    value: ${{ steps.output.outputs.tf_output_json }}

runs:
  using: "composite"
  steps:
    - name: "setup-terraform"
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    - name: "Terraform Backend Config"
      id: backend
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: |
        cat > backend.conf << EOF
        bucket="${{ inputs.tfstate_bucket }}"
        dynamodb_table="${{ inputs.tfstate_dynamodb_table }}"
        EOF

    - name: "Terraform Init"
      id: init
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      run: terraform init -input=false -backend-config=./backend.conf

    - name: "Terraform Validate"
      id: validate
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'plan' }}
      run: terraform validate -no-color

    - name: "Terraform Plan"
      id: plan
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'plan' }}
      run: terraform plan -input=false -var="env=${{ inputs.tf_env }}" -detailed-exitcode

    - name: "Terraform Apply"
      id: apply
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'apply' }}
      run: terraform apply -input=false -var="env=${{ inputs.tf_env }}" -auto-approve

    - name: "Terraform Destroy"
      id: destroy
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'destroy' }}
      run: terraform destroy -input=false -var="env=${{ inputs.tf_env }}" -auto-approve

    - name: "Terraform Output"
      id: output
      working-directory: ${{ inputs.tf_working_dir }}
      shell: bash
      if: ${{ inputs.terraform_action == 'apply' }}
      run: |
        # `terraform-bin` because: https://stackoverflow.com/questions/69925970/how-to-save-terraform-output-variable-into-a-github-action-s-environment-variabl
        echo "tf_output_json=$(terraform-bin output -json -no-color | jq -c)" >> $GITHUB_OUTPUT

